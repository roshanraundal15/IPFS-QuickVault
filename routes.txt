const express = require("express");
const multer = require("multer");
const fs = require("fs");
const path = require("path");
const { google } = require("googleapis");
const db = require("../config/db");
const dotenv = require("dotenv");

dotenv.config();
const router = express.Router();

// Ensure the `uploads` directory exists
const uploadDir = path.join(__dirname, "../uploads/");
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// Multer Configuration (Stores files in `uploads/` directory)
const storage = multer.diskStorage({
  destination: uploadDir,
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + "-" + file.originalname);
  },
});
const upload = multer({ storage });

// Google Drive Authentication
const auth = new google.auth.GoogleAuth({
  keyFile: path.join(__dirname, "../config/credentials.json"), // Ensure correct path
  scopes: ["https://www.googleapis.com/auth/drive.file"], // Limited scope for security
});

const drive = google.drive({ version: "v3", auth });

// Upload Route
router.post("/upload", upload.single("file"), async (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: "No file uploaded" });
  }

  const folderId = process.env.GOOGLE_DRIVE_FOLDER_ID;
  if (!folderId) {
    return res.status(500).json({ error: "Google Drive Folder ID is missing in .env" });
  }

  try {
    // Upload file to Google Drive
    const fileMetadata = {
      name: req.file.originalname,
      parents: [folderId],
    };

    const media = {
      mimeType: req.file.mimetype,
      body: fs.createReadStream(req.file.path),
    };

    const driveResponse = await drive.files.create({
      resource: fileMetadata,
      media,
      fields: "id",
    });

    const fileId = driveResponse.data.id;
    if (!fileId) {
      throw new Error("Google Drive upload failed!");
    }

    // Set public permission for file
    await drive.permissions.create({
      fileId,
      requestBody: { role: "reader", type: "anyone" },
    });

    // Generate sharable link
    const fileUrl = `https://drive.google.com/uc?id=${fileId}`;

    // Insert file details into MySQL Database
    db.query(
      "INSERT INTO files (filename, file_url) VALUES (?, ?)",
      [req.file.originalname, fileUrl],
      (err) => {
        if (err) {
          console.error("Database Error:", err);
          return res.status(500).json({ error: "Database insertion error" });
        }

        // Delete temp file after successful upload
        fs.unlink(req.file.path, (unlinkErr) => {
          if (unlinkErr) console.error("Error deleting temp file:", unlinkErr);
        });

        res.json({ message: "âœ… File uploaded successfully!", fileUrl });
      }
    );
  } catch (error) {
    console.error("ðŸš¨ Upload Error:", error);

    // Cleanup temp file if upload fails
    if (fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }

    res.status(500).json({ error: error.message || "Server error" });
  }
});

module.exports = router;
