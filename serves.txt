const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const db = require("./config/db"); // Ensure database connection is imported
const fileRoutes = require("./routes/fileRoutes");
const authRoutes = require("./routes/authRoutes");

dotenv.config();

// Initialize Express App
const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true })); // Support form data

// Routes
app.use("/api/files", fileRoutes);
app.use("/api/auth", authRoutes);

// Server Port
const PORT = process.env.PORT || 4000;




// ✅ Check Database Connection Before Starting Server
db.getConnection((err, connection) => {
  if (err) {
    console.error("❌ Database connection failed:", err.message);
    process.exit(1); // Exit if DB connection fails
  }

  console.log("✅ MySQL Database connected successfully!");
  connection.release(); // Release connection after check

  // ✅ Start Server Only After DB Check
  app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
  });
});

// ✅ Global Error Handler
app.use((err, req, res, next) => {
  console.error("❌ Internal Server Error:", err.stack);
  res.status(500).json({ message: "Something went wrong!", error: err.message });
});

// ✅ Graceful Shutdown Handling
process.on("SIGINT", () => {
  console.log("\n🛑 Shutting down gracefully...");
  process.exit(0);
});

process.on("SIGTERM", () => {
  console.log("\n🛑 Process terminated...");
  process.exit(0);
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("❌ Unhandled Rejection at:", promise, "reason:", reason);
});

module.exports = app;
